package ${cfg.po};

#foreach($pkg in ${table.importPackages})
import ${pkg};
#end
#if(${swagger2})
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
#end
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.Min;
import com.baomidou.mybatisplus.annotation.TableName;
import java.sql.Timestamp;
#if(${entityLombokModel})
import lombok.Data;
import lombok.EqualsAndHashCode;
## -----   导入 Accessors 去除   ----- import lombok.experimental.Accessors;
#end

/**
 * <p>
 * $!{table.comment} 持久化对象
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${entityLombokModel})
@Data
#if(${superEntityClass})
@EqualsAndHashCode(callSuper = true)
#else
@EqualsAndHashCode(callSuper = false)
#end
## -----   @Accessors去除   ----- @Accessors(chain = true)
#end
@TableName("${table.name}")
#if(${swagger2})
@ApiModel(value="$!{table.comment} 持久化对象", description="$!{table.comment}")
#end
#if(${superEntityClass})
public class ${entity}Po extends ${superEntityClass}#if(${activeRecord})<${entity}Po>#end {
#elseif(${activeRecord})
public class ${entity}Po extends Model<${entity}Po> {
#else
public class ${entity}Po implements Serializable {
#end

#if(${entitySerialVersionUID})
    private static final long serialVersionUID=1L;
#end
## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})

#if(${field.keyFlag})
#set($keyPropertyName=${field.propertyName})
#end
#if("$!field.comment" != "")
    #if(!${field.keyFlag})
    #if(${field.name} != "inner_org_id")
    #if(${swagger2})
    @ApiModelProperty(name = "${field.propertyName}" , value = "${field.comment}" , required = true)
    #if("${field.columnType}" == "STRING")
    @NotEmpty(message = "${field.comment}不能为空")
    #end
    #if("${field.columnType}" == "INTEGER")
    @NotNull(message = "${field.comment}不能为空")
    @Min(value = 0 , message = "${field.comment}不合法")
    #end
    #if("${field.columnType}" == "BIG_DECIMAL")
    @NotNull(message = "${field.comment}不能为空")
    @Min(value = 0 , message = "${field.comment}不合法")
    #end
    #if("${field.columnType}" == "LONG")
    @NotNull(message = "${field.comment}不能为空")
    @Min(value = 0 , message = "${field.comment}不不合法")
    #end
    #else
    /**
     * ${field.comment}
     */
    #end
    #end
    #end
#end
#if(${field.keyFlag})
## 主键
#if(${field.keyIdentityFlag})
    @TableId(value = "${field.name}", type = IdType.AUTO)
#elseif(!$null.isNull(${idType}) && "$!idType" != "")
    @TableId(value = "${field.name}", type = IdType.${idType})
#elseif(${field.convert})
    @TableId("${field.name}")
#end
## 普通字段
#elseif(${field.fill})
## -----   存在字段填充设置   -----
#if(${field.convert})
    @TableField(value = "${field.name}", fill = FieldFill.${field.fill})
#else
    @TableField(fill = FieldFill.${field.fill})
#end
#elseif(${field.convert})
    @TableField("${field.name}")
#end
## 乐观锁注解
#if(${versionFieldName}==${field.name})
    @Version
#end
## 逻辑删除注解
#if(${logicDeleteFieldName}==${field.name})
    @TableLogic
#end
    #if(${field.name} != "inner_org_id")
    private #if(${field.propertyType} == "LocalDateTime")Timestamp#else${field.propertyType}#end ${field.propertyName};
    #end
#end
## ----------  END 字段循环遍历  ----------

#if(!${entityLombokModel})
#foreach($field in ${table.fields})
#if(${field.propertyType.equals("boolean")})
#set($getprefix="is")
#else
#set($getprefix="get")
#end

    public ${field.propertyType} ${getprefix}${field.capitalName}() {
        return ${field.propertyName};
    }

#if(${entityBuilderModel})
    public ${entity}Po set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
#else
    public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
#end
        this.${field.propertyName} = ${field.propertyName};
#if(${entityBuilderModel})
        return this;
#end
    }
#end
#end

#if(${entityColumnConstant})
#foreach($field in ${table.fields})
    public static final String ${field.name.toUpperCase()} = "${field.name}";

#end
#end
#if(${activeRecord})
    @Override
    protected Serializable pkVal() {
#if(${keyPropertyName})
        return this.${keyPropertyName};
#else
        return null;
#end
    }

#end
#if(!${entityLombokModel})
    @Override
    public String toString() {
        return "${entity}Po{" +
#foreach($field in ${table.fields})
#if($!{foreach.index}==0)
        "${field.propertyName}=" + ${field.propertyName} +
#else
        ", ${field.propertyName}=" + ${field.propertyName} +
#end
#end
        "}";
    }
#end
}
