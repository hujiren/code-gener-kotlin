package ${cfg.packageName}.service.impl;

import com.apl.lib.pojo.dto.PageDto;
import com.apl.lib.utils.ResultUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import com.apl.lib.constants.CommonStatusCode;

import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};

import ${cfg.po}.${entity}Po;
import ${cfg.vo}.${entity}ListVo;
import ${cfg.vo}.${entity}InfoVo;
import ${cfg.dto}.${entity}KeyDto;

import java.util.List;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;


/**
 * <p>
 * $!{table.comment} service实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
@Slf4j
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}Po> implements ${table.serviceName} {

    //状态code枚举
    /*enum ${table.serviceName}Code {

            ;

            private String code;
            private String msg;

            ${table.serviceName}Code(String code, String msg) {
                 this.code = code;
                 this.msg = msg;
            }
        }*/


    @Override
    public ResultUtils<Long> add(${entity}AddDto ${table.entityPath}AddDto){

    #if(${cfg.exists_fields})
        this.exists(0L, #foreach($field in ${cfg.exists_fields})${table.entityPath}.${field.getMethodName}#if($foreach.hasNext), #end #end);
    #end

        ${entity}Po ${table.entityPath}Po = new ${entity}Po();
        BeanUtil.copyProperties(${table.entityPath}AddDto, ${table.entityPath}Po);

        Integer flag = baseMapper.insert(${table.entityPath}Po);
        if(flag.equals(1)){
            return ResultUtils.APPRESULT(CommonStatusCode.SAVE_SUCCESS , ${table.entityPath}Po.getId());
        }

        return ResultUtils.APPRESULT(CommonStatusCode.SAVE_FAIL , null);
    }


    @Override
    public ResultUtils<Boolean> updById(${entity}UpdDto ${table.entityPath}UpdDto){

    #if(${cfg.exists_fields})
        this.exists(${table.entityPath}.getId(), #foreach($field in ${cfg.exists_fields})${table.entityPath}.${field.getMethodName}#if($foreach.hasNext), #end #end);
    #end

        ${entity}Po ${table.entityPath}Po = new ${entity}Po();
        BeanUtil.copyProperties(${table.entityPath}UpdDto, ${table.entityPath}Po);

        Integer flag = baseMapper.updateById(${table.entityPath}Po);
        if(flag.equals(1)){
            return ResultUtils.APPRESULT(CommonStatusCode.SAVE_SUCCESS , true);
        }

        return ResultUtils.APPRESULT(CommonStatusCode.SAVE_FAIL , false);
    }


    @Override
    public ResultUtils<Boolean> delById(Long id){

        Integer flag = baseMapper.deleteById(id);
        if(flag > 0){
            return ResultUtils.APPRESULT(CommonStatusCode.DEL_SUCCESS , true);
        }

        return ResultUtils.APPRESULT(CommonStatusCode.DEL_FAIL , false);
    }


    @Override
    public ResultUtils<${entity}InfoVo> selectById(Long id){

        ${entity}InfoVo ${table.entityPath}InfoVo = baseMapper.getById(id);

        return ResultUtils.APPRESULT(CommonStatusCode.GET_SUCCESS, ${table.entityPath}InfoVo);
    }


    @Override
    public ResultUtils<Page<${entity}ListVo>> getList(PageDto pageDto, ${entity}KeyDto keyDto){

        Page<${entity}ListVo> page = new Page();
        page.setCurrent(pageDto.getPageIndex());
        page.setSize(pageDto.getPageSize());

        List<${entity}ListVo> list = baseMapper.getList(page , keyDto);
        page.setRecords(list);

        return ResultUtils.APPRESULT(CommonStatusCode.GET_SUCCESS , page);
    }


#if(${cfg.exists_fields})
    void exists(Long id, #foreach($field in ${cfg.exists_fields}) String ${field.name}#if($foreach.hasNext), #end #end) {

        List<${entity}InfoVo> list = baseMapper.exists(id, #foreach($field in ${cfg.exists_fields})${field.name}#if($foreach.hasNext), #end #end);
        if (!CollectionUtils.isEmpty(list)) {
        for(${entity}InfoVo  ${table.entityPath}InfoVo : list) {

    #foreach($field in ${cfg.exists_fields})
            if(${table.entityPath}InfoVo.${field.getMethodName}.equals(${field.name}))
                throw new AplException("${field.upperCaseName}_EXIST", "${field.name}已经存在");
    #end
        }
      }
    }
#end
}