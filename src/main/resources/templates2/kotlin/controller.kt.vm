package ${package.Controller}

#if(${restControllerStyle})
import io.swagger.annotations.Api
import io.swagger.annotations.ApiImplicitParam
import io.swagger.annotations.ApiImplicitParams
import io.swagger.annotations.ApiOperation
import lombok.extern.slf4j.Slf4j
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.RestController
#else
import org.springframework.stereotype.Controller
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage}
#end
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.beans.factory.annotation.Autowired
import com.apl.common.pojo.dto.PageDto
import org.springframework.web.bind.annotation.*
import ${package.Service}.${table.serviceName}
import ${cfg.po}.${entity}Po
import ${cfg.vo}.${entity}ListVo
import ${cfg.vo}.${entity}InfoVo
import ${cfg.dto}.${entity}KeyDto
import com.baomidou.mybatisplus.extension.plugins.pagination.Page
import com.apl.common.utils.ResultUtil
import com.apl.common.validate.ApiParamValidate
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull

/**
 *
 * @author ${author}
 * @since ${date}
 */
@RestController
@RequestMapping("/${table.name}")
@Validated
@Api(value = "$!{table.comment}", tags = ["$!{table.comment}"])
@Slf4j

class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end{

    @Autowired
    private lateinit var ${table.entityPath}Service: ${table.serviceName}

    @PostMapping(value = ["/add"])
    @ApiOperation(value = "添加", notes = "#foreach($field in ${cfg.exists_fields})${field.upperCaseName}_EXIST -> ${field.name}已经存在#if($foreach.hasNext)\n"+
    "#end#end")
    fun add(${table.entityPath}Po: ${entity}Po): ResultUtil<*>?  {
        ApiParamValidate.validate(${table.entityPath}Po)

        return ${table.entityPath}Service.add(${table.entityPath}Po)
    }


    @PostMapping(value = ["/upd"])
    @ApiOperation(value = "更新", notes = "#foreach($field in ${cfg.exists_fields})${field.upperCaseName}_EXIST -> ${field.name}已经存在#if($foreach.hasNext)\n"+
    "#end#end")
    fun updById(${table.entityPath}Po: ${entity}Po): ResultUtil<*>?  {
        ApiParamValidate.notEmpty("id", ${table.entityPath}Po.getId())
        ApiParamValidate.validate(${table.entityPath}Po)

        return ${table.entityPath}Service.updById(${table.entityPath}Po)
    }


    @PostMapping(value = ["/del"])
    @ApiOperation(value = "删除", notes = "删除")
    @ApiImplicitParam(name = "id", value = " id", required = true, paramType = "query")
    fun delById(@NotNull(message = "id不能为空") @Min(value = 1, message = "id不能小于1") id: Long): ResultUtil<*>?  {

        return ${table.entityPath}Service.delById(id)
    }


    @PostMapping(value = ["/get"])
    @ApiOperation(value = "获取详细", notes = "获取详细")
    @ApiImplicitParam(name = "id", value = "id", required = true, paramType = "query")
    fun selectById(@NotNull(message = "id不能为空") @Min(value = 1, message = "id不能小于1") id: Long): ResultUtil<*>?  {

        return ${table.entityPath}Service.selectById(id)
    }


    @PostMapping(value = ["/get-list"])
    @ApiOperation(value = "分页查找", notes = "分页查找")
    fun getList(pageDto: PageDto, @Validated ${entity}keyDto: KeyDto): ResultUtil<*>?  {

        return ${table.entityPath}Service.getList(pageDto, keyDto)
    }


}
